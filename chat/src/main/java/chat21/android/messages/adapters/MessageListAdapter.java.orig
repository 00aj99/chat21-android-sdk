package it.smart21.android.chat.messages.adapters;

import android.content.Context;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.ViewGroup;

import java.util.List;

import it.smart21.android.chat.Chat;
import it.smart21.android.chat.R;
import it.smart21.android.chat.adapters.AbstractRecyclerAdapter;
import it.smart21.android.chat.conversations.models.Conversation;
import it.smart21.android.chat.messages.holders.recipient.RecipientNoProfilePictureViewHolder;
import it.smart21.android.chat.messages.holders.recipient.RecipientViewHolder;
import it.smart21.android.chat.messages.holders.sender.SenderNoProfilePictureViewHolder;
import it.smart21.android.chat.messages.holders.sender.SenderViewHolder;
import it.smart21.android.chat.messages.listeners.OnMessageClickListener;
import it.smart21.android.chat.messages.models.Message;
import it.smart21.android.chat.user.models.IChatUser;
import it.smart21.android.chat.utils.floating_contextual_menu.OnFloatingContextualMenuListener;

/**
 * Created by stefano on 31/08/2015.
 */
public class MessageListAdapter extends AbstractRecyclerAdapter<Message, RecyclerView.ViewHolder> {
    private static final String TAG = MessageListAdapter.class.getName();

    private IChatUser currentLoggedUser;
    private String sender;
    private Chat chat;
    private Conversation conversation;
    private boolean isProfilePictureEnabled = false;
    private boolean isRecipientProfilePictureEnabled = false;
    private OnFloatingContextualMenuListener callback;
    private OnMessageClickListener onMessageClickListener;


    public MessageListAdapter(Context context, OnFloatingContextualMenuListener callback,
                              List<Message> items, Chat chat,
                              Conversation conversation) {
        super(context, items);
        this.callback = callback;
        this.chat = chat;
        this.currentLoggedUser = chat.getLoggedUser();
        this.conversation = conversation;
    }

    /**
     * Enable or disable the sender profile picture
     *
     * @param enable
     */
    public void setProfilePictureEnabled(boolean enable) {
//        Log.i(TAG, "setProfilePictureEnabled");
        this.isProfilePictureEnabled = enable;
    }

    /**
     * Returns the status of the sender profile picture
     */
    public boolean isProfilePictureEnabled() {
//        Log.i(TAG, "isProfilePictureEnabled");
        return isProfilePictureEnabled;
    }

    /**
     * Enable or disable the recipent profile picture.
     *
     * @param enable if FALSE shows the the recipient profile picture inside the toolbar,
     *               if TRUE shows the recipient profile picture inside the message list
     */
    public void setRecipientProfilePictureEnabled(boolean enable) {
//        Log.i(TAG, "setRecipientProfilePictureEnabled");
        this.isRecipientProfilePictureEnabled = enable;
    }

    /**
     * Callback called when a message is clicked.
     * Returns the control to the calling activity
     *
     * @param onMessageClickListener the listener
     */
    public void setMessageClickListener(OnMessageClickListener onMessageClickListener) {
        this.onMessageClickListener = onMessageClickListener;
    }


    @Override
    public int getItemViewType(int position) {
//        Log.i(TAG, "getItemViewType");
        Message message = getItems().get(position);
        sender = message.getSender();

        if (sender.compareTo(currentLoggedUser.getId()) == 0) {
            if (isProfilePictureEnabled()) {
                return R.id.row_sender;
            } else {
                return R.id.row_sender_no_profile_picture;
            }
        } else {
            if (isRecipientProfilePictureEnabled) {
                return R.id.row_recipient;
            } else {
                return R.id.row_recipient_no_profile_picture;
            }
        }
    }

    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
//        Log.i(TAG, "onCreateViewHolder");
        LayoutInflater inflater = LayoutInflater.from(getContext());

        if (viewType == R.id.row_sender) {
            return new SenderViewHolder(inflater.inflate(R.layout.row_sender, parent, false));
        } else if (viewType == R.id.row_sender_no_profile_picture) {
            return new SenderNoProfilePictureViewHolder(
                    inflater.inflate(R.layout.row_sender_no_profile_picture, parent, false));
        } else if (viewType == R.id.row_recipient) {
            return new RecipientViewHolder(inflater.inflate(R.layout.row_recipient, parent, false));
        } else if (viewType == R.id.row_recipient_no_profile_picture) {
            return new RecipientNoProfilePictureViewHolder(
                    inflater.inflate(R.layout.row_recipient_no_profile_picture, parent, false));
        }
        return null;
    }

    @Override
    public void onBindViewHolder(final RecyclerView.ViewHolder holder, int position) {
//        Log.i(TAG, "onBindViewHolder");
        Message message = getItems().get(position);

        if (holder instanceof SenderViewHolder) {
            ((SenderViewHolder) holder).bind(message, chat.getLoggedUser(), position,
                    callback, onMessageClickListener);
        } else if (holder instanceof SenderNoProfilePictureViewHolder) {
            ((SenderNoProfilePictureViewHolder) holder).bind(message, onMessageClickListener);
        } else if (holder instanceof RecipientViewHolder) {
            ((RecipientViewHolder) holder).bind(chat, conversation, message, position,
                    isRecipientProfilePictureEnabled, callback, onMessageClickListener);
        } else if (holder instanceof RecipientNoProfilePictureViewHolder) {
            ((RecipientNoProfilePictureViewHolder) holder).bind(message, onMessageClickListener);
        }
    }


    /**
     * Update only a single message.
     *
     * @param message the message to update
     */
    public void updateMessage(Message message) {
//        Log.i(TAG, "updateMessage");
        List<Message> messageList = getItems();

        // TODO: 04/10/2016 rendere parametro
        int position = messageList.size() - 1;

        messageList.remove(position);
        messageList.add(message);
        notifyDataSetChanged();
    }
}