package it.smart21.android.chat.messages.activites;

import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseReference;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import br.com.instachat.emojilibrary.controller.TelegramPanel;
import br.com.instachat.emojilibrary.model.layout.EmojiCompatActivity;
import br.com.instachat.emojilibrary.model.layout.TelegramPanelEventListener;
import it.smart21.android.chat.Chat;
import it.smart21.android.chat.R;
import it.smart21.android.chat.conversations.models.Conversation;
import it.smart21.android.chat.conversations.utils.ConversationUtils;
import it.smart21.android.chat.messages.adapters.MessageListAdapter;
import it.smart21.android.chat.messages.listeners.OnMessageTreeUpdateListener;
import it.smart21.android.chat.messages.models.Message;
import it.smart21.android.chat.messages.utils.MessageUtils;
import it.smart21.android.chat.user.models.IChatUser;
import it.smart21.android.chat.utils.ChatUtils;
import it.smart21.android.chat.utils.ImageUtils;
import it.smart21.android.chat.utils.StringUtils;
import it.smart21.android.chat.utils.floating_contextual_menu.FloatingContextualMenu;
import it.smart21.android.chat.utils.floating_contextual_menu.FloatingContextualMenuType;
import it.smart21.android.chat.utils.floating_contextual_menu.OnFloatingContextualMenuListener;
import it.smart21.android.chat.utils.listeners.OnProfilePictureClickListener;

/**
 * Created by stefano on 31/08/2015.
 */
public class MessageListActivity extends EmojiCompatActivity
        implements OnFloatingContextualMenuListener, OnMessageTreeUpdateListener,
        TelegramPanelEventListener {
    private static final String TAG = MessageListActivity.class.getName();

    private Conversation conversation;
    private String conversationId;
    private RecyclerView recyclerView;
    private MessageListAdapter messageListAdapter;
    private Chat chat;
    private Map<String, Object> extras;
    private Toolbar toolbar;

    private List<Message> messageList = new ArrayList<>();

    // panel which contains the edittext, the emoji button and the attach button
    private TelegramPanel mInputPanel;

//    private ViewGroup rootLayout;
//    private int previousHeightDiffrence;
//    private boolean isKeyBoardVisible;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_message_list);

        chat = (Chat) getIntent().getExtras().getSerializable(Chat.INTENT_BUNDLE_CHAT);
        extras = (Map<String, Object>) getIntent().getExtras().getSerializable(Chat.INTENT_BUNDLE_EXTRAS);


        // retrieve conversation
        conversation = (Conversation) getIntent().getSerializableExtra(Chat.INTENT_BUNDLE_CONVERSATION);

        // generate the conversationId
        conversationId = ConversationUtils.getConversationId(getString(R.string.tenant),
                conversation.getSender(), conversation.getRecipient());

        registerViews();

        initViews();

        observeNode();
    }

//    private void observeNode() {
//        // firebase message tree listener
//        DatabaseReference mMessageListNode = FirebaseDatabase.getInstance()
//                .getReferenceFromUrl(getString(R.string.root) + "/messages/" + conversationId);
//        mMessageListNode.keepSynced(true); // enable cache
//        MessageUtils.observeMessageTree(mMessageListNode, this);
//    }


    private void observeNode() {
        Log.i(TAG, "observeNode");
        // firebase message tree listener
//        DatabaseReference mMessageListNode = FirebaseDatabase.getInstance()
//                .getReferenceFromUrl(getString(R.string.root) + "/messages/" + conversationId);
//        mMessageListNode.keepSynced(true); // enable cache
        MessageUtils.observeMessageTree(Chat.getNodeConversation(this, conversationId), this);
    }

    private void registerViews() {
        Log.i(TAG, "registerViews");
        recyclerView = (RecyclerView) findViewById(R.id.message_list);
        toolbar = (Toolbar) findViewById(R.id.toolbar);
//        rootLayout = (ViewGroup) findViewById(R.id.rootLayout);
    }

    private void initViews() {
        Log.i(TAG, "initViews");
        initToolbar();
        initRecyclerView();
        initInputPanel();
    }

    private void initToolbar() {
        Log.i(TAG, "initToolbar");

        //TODO andrealeo. getting the user.fullname before from conversation  and after from contacts
//        if (this.conversation.getConvers_with_fullname()!=null) {
//            setDisplayName(this.conversation.getConvers_with_fullname());
//        }else {

        //first of all set dispalay name to username. if fullname is not found show username
        String deNormalizedUsername = ChatUtils.deNormalizeUsername(conversation.getConvers_with());
        setDisplayName(deNormalizedUsername);


        for (IChatUser user : chat.getContacts()) {
            if (user.getId().compareTo(conversation.getConvers_with()) == 0) {
                setDisplayName(user.getFullName());
                setProfilePicture(user);
                break; // user found, no need to iterate anymore
            }
        }

//        }


        ChatUtils.setToolbar(this, toolbar, true);
    }

    private void setDisplayName(String fullName) {
        Log.i(TAG, "setDisplayName");
        TextView mTitle = (TextView) findViewById(R.id.toolbar_title);
        if (StringUtils.isValid(fullName)) {
            mTitle.setText(fullName);
        }
    }

    private void setProfilePicture(IChatUser user) {
        Log.i(TAG, "setProfilePicture");
        ImageView profilePictureToolbar = (ImageView) findViewById(R.id.profile_picture);

        // if isRecipientProfilePictureEnabled() == FALSE show the profile picture inside the toolbar
        // if isRecipientProfilePictureEnabled() == TRUE hide the profile picture inside the toolbar
        if (!ChatUtils.isRecipientProfilePictureEnabled(getApplicationContext())) {
            Drawable profilePicturePlaceholder = getResources()
                    .getDrawable(R.drawable.ic_profile_picture_placeholder);
            ImageUtils.loadImage(this, user.getProfilePictureUrl(),
                    profilePicturePlaceholder, profilePictureToolbar, true);
            profilePictureToolbar.setOnClickListener(new OnProfilePictureClickListener(this,
                    chat, user.getId()));
        }
    }

    private void initRecyclerView() {
        Log.i(TAG, "initRecyclerView");
        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(this);
        linearLayoutManager.setStackFromEnd(true);  // put adding from bottom
        recyclerView.setLayoutManager(linearLayoutManager);
        initRecyclerViewAdapter(recyclerView);
    }

    private void initRecyclerViewAdapter(RecyclerView recyclerView) {
        Log.i(TAG, "initRecyclerViewAdapter");
        messageListAdapter = new MessageListAdapter(this, this, messageList, chat, conversation);
        messageListAdapter.setProfilePictureEnabled(ChatUtils.isSenderProfilePictureEnabled(getApplicationContext()));
        messageListAdapter.setRecipientProfilePictureEnabled(ChatUtils.isRecipientProfilePictureEnabled(getApplicationContext()));
        messageListAdapter.setMessageClickListener(MessageUtils.onMessageClickListener);
        recyclerView.setAdapter(messageListAdapter);
    }

    private void initInputPanel() {
        Log.i(TAG, "initInputPanel");
        mInputPanel = new TelegramPanel(this, this);

//        observeKeyboardChanges(rootLayout);
    }

    @Override
    public void onBackPressed() {
//        final String conversationId = ChatUtils.getConversationId(getString(R.string.tenant),
//                conversation.getSender(), conversation.getRecipient());
//
//        Firebase node = new Firebase(getString(R.string.root))
//                .child("tenantUsers")
//                .child(getString(R.string.tenant) + "-" + conversation.getRecipient())
//                .child("conversations");
//
//
//        node.addValueEventListener(new ValueEventListener() {
//            @Override
//            public void onDataChange(DataSnapshot dataSnapshot) {
//                if (dataSnapshot.child(conversationId).exists()) {
//                    ChatUtils.setConversationRead(MessageListActivity.this, chat, conversation);
//                }
//            }
//
//            @Override
//            public void onCancelled(FirebaseError databaseError) {
//                Log.e(TAG, "Code: " + databaseError.getCode() +
//                        "\nMessage: " + databaseError.getMessage());
//
//            }
//        });

        super.onBackPressed();
    }


    @Override
    public void onFloatingActionMenuLongClickListener(View anchor, int position) {
        Log.i(TAG, "onFloatingActionMenuLongClickListener");
        FloatingContextualMenu popupWindow = new FloatingContextualMenu(getApplicationContext(),
                R.layout.contextual_menu_message_list, anchor);
        String contextualMenuIconSetting = getString(R.string.enable_contextual_menu_icon);
        popupWindow.setItemType(FloatingContextualMenuType.valueOf(contextualMenuIconSetting.toUpperCase()));
        popupWindow.show();
    }

    @Override
    public void onTreeChildAdded(DatabaseReference node, DataSnapshot dataSnapshot, Message message) {
        Log.i(TAG, "onTreeChildAdded");
        // udpate status read
        if (message.getRecipient().compareTo(chat.getLoggedUser().getId()) == 0) {
            node.child(dataSnapshot.getKey()).child("status").setValue(Message.STATUS_READ);
        } else {
            Log.d(TAG, "recipient is not equal to loggedUser");
        }

        messageListAdapter.insertBottom(message);
        recyclerView.scrollToPosition(messageListAdapter.getItemCount() - 1);
    }

    @Override
    public void onTreeChildChanged(DatabaseReference node, DataSnapshot dataSnapshot, Message message) {
        Log.i(TAG, "onTreeChildChanged");
        // udpate status read
        if (message.getRecipient().compareTo(chat.getLoggedUser().getId()) == 0) {
            node.child(dataSnapshot.getKey()).child("status").setValue(Message.STATUS_READ);
        } else {
            Log.d(TAG, "recipient is not equal to loggedUser");
        }

        messageListAdapter.updateMessage(message);
        recyclerView.scrollToPosition(messageListAdapter.getItemCount() - 1);
    }

    @Override
    public void onTreeChildRemoved() {
        Log.i(TAG, "onTreeChildRemoved");
    }

    @Override
    public void onTreeChildMoved() {
        Log.i(TAG, "onTreeChildMoved");
    }

    @Override
    public void onTreeCancelled() {
        Log.i(TAG, "onTreeCancelled");
    }

    @Override
    public void onAttachClicked() {
        Log.i(TAG, "onAttachClicked");
    }

    @Override
    public void onMicClicked() {
        Log.i(TAG, "onMicClicked");
    }

    @Override
    public void onSendClicked() {
        Log.i(TAG, "onSendClicked");

        String text = mInputPanel.getText().toString();

        // sendMessage(text, chat.getLoggedUser().getFullName(), conversation);
        // update firebase references and send notification
        MessageUtils.sendMessage(MessageListActivity.this, chat, text, conversation, extras);

        //clear the edittext
        mInputPanel.setText("");
    }

//    // check visibility changes in softkeyboard.
//    // when softkeyboard is visible resize the emoji panel heght.
//    private void observeKeyboardChanges(final View parentLayout) {
//        parentLayout.getViewTreeObserver().addOnGlobalLayoutListener(
//                new ViewTreeObserver.OnGlobalLayoutListener() {
//                    @Override
//                    public void onGlobalLayout() {
//                        Rect r = new Rect();
//
//                        parentLayout.getWindowVisibleDisplayFrame(r);
//
//                        int screenHeight = parentLayout.getRootView().getHeight();
//                        int keyboardHeight = screenHeight - (r.bottom);
//
//                        // get edittext heigth
//                        mInputPanel.getEditTextInput().measure(0, 0);
//                        mInputPanel.getEditTextInput().getMeasuredWidth();
//
//                        // convert the heght in px to dp
//                        int keyboardHeightDp = (int) TypedValue
//                                .applyDimension(TypedValue.COMPLEX_UNIT_DIP, keyboardHeight,
//                                        getResources().getDisplayMetrics());
//
//                        int emojiTabsDp = (int) TypedValue
//                                .applyDimension(TypedValue.COMPLEX_UNIT_DIP, 42,
//                                        getResources().getDisplayMetrics());
//
//                        int height = keyboardHeightDp + getToolbarHeight() + emojiTabsDp;
//
//                        changeKeyboardHeight(height);
//                    }
//                });
//    }
//
//    // resize the keyboard height
//    private void changeKeyboardHeight(int height) {
//        RelativeLayout emojiKeyboardLayout = mInputPanel.getEmojiKeyboard().getEmojiKeyboardLayout();
//
//        // Gets the layout params to resize the layout
//        ViewGroup.LayoutParams params = emojiKeyboardLayout.getLayoutParams();
//
//        // sets the new height
//        params.height = height;
//        emojiKeyboardLayout.setLayoutParams(params);
//    }
//
//    // get the toolbar's height
//    private int getToolbarHeight() {
//        int toolbarHeight = 0;
//        TypedValue tv = new TypedValue();
//        if (getTheme().resolveAttribute(android.R.attr.actionBarSize, tv, true)) {
//            toolbarHeight = TypedValue.complexToDimensionPixelSize(tv.data, getResources().getDisplayMetrics());
//        }
//        return toolbarHeight;
//    }
}